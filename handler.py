
from aiogram import types, Router, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, StateFilter, Command
import requests

from config import bot, admin_id
from keyboards import create_request, problems, problems_, accept_request, accept_request_with_time
from states import Request
from enums import problems_enum, problems_types_enum

router = Router()


@router.message(CommandStart())
async def start(message: types.Message):
    text = """
–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ê–û "–ß–∏—Å—Ç–æ–ø–æ–ª—å –í–æ–¥–æ–∫–∞–Ω–∞–ª" –æ—Ç –æ—Ç–¥–µ–ª–∞ –ê–°–£–ü

–ï—Å–ª–∏ —É –≤–∞—Å —á—Ç–æ-—Ç–æ –≤—ã—à–ª–æ –∏–∑ —Å—Ç—Ä–æ—è –∏–ª–∏ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π. –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É
    """

    await message.answer(text, reply_markup=create_request)


@router.message(Command("clear_context"))
async def clear_context(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("<b>–û—á–∏—â–µ–Ω–æ</b>")


@router.callback_query(F.data == "create_request")
async def create_request_(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("üè¢ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞</b>")
    await state.set_state(Request.otdel)


@router.message(Request.otdel)
async def create_request_state_otdel(message: types.Message, state: FSMContext):
    otdel = message.text
    await state.update_data({"otdel": otdel})

    await message.answer("üë® <b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û</b>",)
    await state.set_state(Request.FIO)


@router.message(Request.FIO)
async def create_request_state_FIO(message: types.Message, state: FSMContext):
    FIO = message.text
    await state.update_data({"FIO": FIO})

    await message.answer("üñ• <b>–í —á–µ–º –ø—Ä–æ–±–ª–µ–º–∞</b>", reply_markup=problems)
    await state.set_state(Request.problem_type)

@router.callback_query(
    F.data.startswith("problem"),
    StateFilter(Request.problem_type)
)
async def type_problem_state(query: types.CallbackQuery, state: FSMContext):
    data = query.data.split("_")
    problem = data[1]

    if problems_types_enum[problem] == '–î—Ä—É–≥–æ–µ':
        await state.update_data({'problem_type': problem})
        await state.set_state(Request.other)
        await query.message.delete()
        return await query.message.answer('üñ• <b>–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É</b>')


    if problem in problems_.keys():
        await state.set_state(Request.problem)
        await state.update_data({'problem_type': problem})

        return await query.message.edit_text(
            "üñ• –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É",
            reply_markup=problems_[problem]
        )

    state_data = await state.get_data()
    await query.message.delete()

    await query.message.answer('‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ</b>')

    await send_request_to_admin(state_data, query.from_user.id)


@router.callback_query(
    F.data.startswith("problem"),
    StateFilter(Request.problem)
)
async def problem_state(query: types.CallbackQuery, state: FSMContext):
    data = query.data.split(":")
    problem = data[1]
    problem_type = data[0].split('_')[1]

    if problems_enum[problem_type][int(problem)] == '–î—Ä—É–≥–æ–µ':
        await state.set_state(Request.other)
        await query.message.delete()
        return await query.message.answer('üñ• <b>–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É</b>')

    state_data = await state.get_data()
    state_data['problem'] = problems_enum[problem_type][int(problem)]
    await query.message.delete()

    await query.message.answer('‚úÖ  <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ</b>')
    await send_request_to_admin(state_data, query.from_user.id)


@router.message(Request.other)
async def create_request_state_other(message: types.Message, state: FSMContext):
    state_data = await state.get_data()

    problem = message.text
    state_data['problem'] = problem

    await message.answer('‚úÖ  <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ</b>')
    await send_request_to_admin(state_data, message.from_user.id)


async def send_request_to_admin(
        state_data: dict,
        user_id: int
):
    problem_type = problems_types_enum[state_data['problem_type']]
    otdel = state_data['otdel']
    FIO = state_data['FIO']
    problem = state_data['problem']

    text = ('üìä <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b> \n'
            f'üè¢ <b>–û—Ç–¥–µ–ª:</b> <a href="tg://openmessage?user_id={user_id}">{otdel}</a>\n'
            f'üë® <b>–§–ò–û:</b> {FIO}\n'
            f'üñ• <b>–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:</b> {problem_type}\n'
            f'üñ• <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {problem}')
    data = {
        "fio": FIO,
        "user_id": user_id,
        "type_problem": problem_type,
        "problem": problem,
    }
    requests.post("http://127.0.0.1:8000/bidcreated/", data=data)
    await bot.send_message(admin_id, text, reply_markup=accept_request(user_id))


@router.callback_query(F.data.startswith('accept'))
async def accept_request_(query: types.CallbackQuery,):
    data = query.data.split(':')
    user_id = int(data[1])

    if len(data) == 2:
        return await query.message.edit_reply_markup(reply_markup=accept_request_with_time(user_id))
    time = int(data[2])

    await bot.send_message(user_id, f"<b>‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ {time} –º–∏–Ω—É—Ç</b>",)
    await query.message.edit_reply_markup(reply_markup=None)



